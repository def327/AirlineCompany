
package by.zyablov.airlinecompany.beans.aircrafts;

import java.io.Serializable;

import by.zyablov.airlinecompany.beans.measures.KilometerPerHour;
import by.zyablov.airlinecompany.beans.techdata.BasicTechAircraftData;
import by.zyablov.airlinecompany.tools.HashMakeManager;

/**
 * Class {@code Aircraft} represents an aircraft, which includes id, name,
 * technical information.
 * 
 * @author Дмитрий
 * @version 1.0
 * @since 2016
 * 
 */
public abstract class Aircraft implements Comparable<Object>, Serializable {

	/**
	 * This value is genereted by JVM to serialize {@code Aircraft} class
	 */
	private static final long serialVersionUID = 723753384223393921L;

	/**
	 * This value is a field of {@code Aircraft} class to count {@code Aircraft}
	 * instances.
	 */
	private static int aircraftsCounter = 0;

	/**
	 * This value is a unique ID for {@code Aircraft} object. Also this field is
	 * declared with the modifier transient, for serialization. Every readed
	 * {@code Aircraft} object from file has a unique ID, generated by
	 * {@code IdAircraftMakeManager}.
	 * 
	 * @see by.zyablov.airlinecompany.tools.IdAircraftMakeManager
	 */
	protected transient int idAircraft;

	/**
	 * This value is a name of {@code Aircraft} object.
	 */
	protected String nameAircraft;

	/**
	 * This value represents a basic techinal characteristic of every
	 * {@code Aircraft} object.
	 * 
	 * @see by.zyablov.airlinecompany.beans.techdata.BasicTechAircraftData
	 */
	protected BasicTechAircraftData basicTechAircraftData;

	/**
	 * Returns an {@code Aircraft} object's techinical information, which is
	 * parsed to string
	 * 
	 * @return a full techinical information, parsed to String
	 */
	public abstract String getFullAircraftInformationDataToString();

	/**
	 * Constructor.
	 * 
	 * @param idAircraft
	 *            - a unique ID of {@code Aircraft} object
	 * @param nameAircraft
	 *            - a name for {@code Aircraft} object
	 * @param basicTechAircraftData
	 *            - a {@code BasicTechAircraftData}, which represent's basic
	 *            technical characteristic of {@code Aircraft} object
	 */
	public Aircraft(int idAircraft, String nameAircraft, BasicTechAircraftData basicTechAircraftData) {
		this.idAircraft = idAircraft;
		this.nameAircraft = nameAircraft;
		this.basicTechAircraftData = basicTechAircraftData;

		Aircraft.aircraftsCounter++;
	}

	/**
	 * Constructor.
	 * 
	 * @param idAircraft
	 *            - a unique ID of {@code Aircraft} object
	 * @param nameAircraft
	 *            - a name for {@code Aircraft} object
	 * @param basicTechAircraftData
	 *            - a {@code BasicTechAircraftData}, which represent's basic
	 *            technical characteristic of {@code Aircraft} object
	 */
	public Aircraft() {
		idAircraft = 0;
		nameAircraft = null;
		basicTechAircraftData = new BasicTechAircraftData();

		Aircraft.aircraftsCounter++; // for static field
	}

	public static int getAircraftsCounter() {
		return Aircraft.aircraftsCounter;
	}

	public static void setAircraftsCounter(int aircraftsCounter) {
		Aircraft.aircraftsCounter = aircraftsCounter;
	}

	public int getIdAircraft() {
		return idAircraft;
	}

	public void setIdAircraft(int idAircraft) {
		this.idAircraft = idAircraft;
	}

	public String getNameAircraft() {
		return nameAircraft;
	}

	public void setNameAircraft(String nameAircraft) {
		this.nameAircraft = nameAircraft;
	}

	public BasicTechAircraftData getBasicTechAircraftData() {
		return basicTechAircraftData;
	}

	public void setBasicTechAircraftData(BasicTechAircraftData basicTechAircraftData) {
		this.basicTechAircraftData = basicTechAircraftData;
	}

	/**
	 * Returns a string representation of {@code Aircraft} object.
	 * 
	 * @return a string, which is consisted of
	 *         <i>idAircraft</i>,<i>nameAircraft</i> and
	 *         <i>basicTechAircraftData</i> fields of {@code Aircraft}.
	 */
	@Override
	public String toString() {
		return ("id = " + (this.idAircraft) + "\n" + "name = " + (this.nameAircraft) + "\n"
				+ (this.basicTechAircraftData.toString()));
	}

	/**
	 * Returns a hash code value of {@code Aircraft} object, using
	 * <i>nameAircraft</i> and <i>idAircraft</i> fields of {@code Aircraft}.
	 * 
	 * @return a hash code value of {@code Aircraft} object
	 * 
	 */
	@Override
	public int hashCode() {
		return (HashMakeManager.createHashValue(this.nameAircraft + this.idAircraft));
	}

	/**
	 * Indicates whether some other {@code Aircraft} object is "equal to " this
	 * one.
	 * 
	 * @param obj
	 *            the reference object with which to compare
	 * @return <b>{@code true}</b> if this {@code Aircraft} object is the same
	 *         as obj argument; <b>{@code false}</b> otherwise.
	 * 
	 */
	@Override
	public boolean equals(Object obj) {
		if (obj == this) {
			return true;
		}

		if (obj == null) {
			return false;
		}

		if (!(obj instanceof Aircraft)) {
			return false;
		}

		Aircraft other = (Aircraft) obj;
		return ((this.idAircraft == other.idAircraft) && (this.nameAircraft.equals(other.nameAircraft))
				&& (this.basicTechAircraftData.equals(other.basicTechAircraftData)));
	}

	/**
	 * 
	 * Compares {@code Aircraft} objects by their {@code KilometerPerHour} field
	 * from {@code BasicTechAircraftData} field of {@code Aircraft}.
	 * 
	 * @param obj
	 *            the reference object with which to compare
	 * 
	 * @return the value {@code 0} if the argument obj is equal to this
	 *         {@code Aircraft} object; a value less than {@code 0} if this
	 *         {@code Aircraft} object is less than the obj argument; and a
	 *         value greater than {@code 0} if this {@code Aircraft} object is
	 *         greater than the obj argument.
	 * 
	 */
	@Override
	public int compareTo(Object o) {
		Aircraft other = (Aircraft) o;
		KilometerPerHour otherMidVelocity = other.getBasicTechAircraftData().getMiddleVelocity();

		return ((KilometerPerHour) this.basicTechAircraftData.getMiddleVelocity()).compareTo(otherMidVelocity);
	}
}
